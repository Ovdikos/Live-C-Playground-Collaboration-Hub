@page "/login"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject UserState UserState

@using Application.AuthService
@using Application.DTOs

<div class="container mt-5" style="max-width: 400px;">
    <h3 class="fw-bold mb-4">Login</h3>

    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">@error</div>
    }

    <EditForm Model="login" OnValidSubmit="HandleLogin" FormName="loginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label>Username</label>
            <InputText @bind-Value="login.Username" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <InputText @bind-Value="login.Password" type="password" class="form-control" />
        </div>
        <button class="btn btn-primary w-100" type="submit">Login</button>
        <div class="text-center mt-3">
            <a href="/register">Don't have an account? Register</a>
        </div>
    </EditForm>
</div>

@code {
    private LoginUserDto login = new();
    private string? error;

    private async Task HandleLogin()
    {
        error = null;
        var response = await Http.PostAsJsonAsync("/api/auth/login", login);
        if (!response.IsSuccessStatusCode)
        {
            error = "Invalid username or password";
            return;
        }
        var result = await response.Content.ReadFromJsonAsync<AuthResult>();
        if (result is not null)
        {
            UserState.SetAuth(result.token, result.user);
            NavManager.NavigateTo("/snippets", true);
        }
    }

    public class AuthResult
    {
        public string token { get; set; }
        public UserDto user { get; set; }
    }
}