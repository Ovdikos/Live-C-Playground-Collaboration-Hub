@page "/snippets/{Id:guid}/edit"
@inject HttpClient Http
@inject UserState UserState
@inject NavigationManager Nav

@using Application.DTOs.SnippetsDtos
@using Application.Features.CodeSnippets.Commands.UpdateCodeSnippet
@using Web.AuthService

<h3 class="edit-snippet-title mb-4">Edit Snippet</h3>

@if (_error != null)
{
    <div class="alert alert-danger snippet-edit-error">@_error</div>
}
else if (_editSnippetModel == null)
{
    <div class="snippet-edit-loading">Loading...</div>
}
else
{
    <EditForm Model="_editSnippetModel" OnValidSubmit="HandleEdit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group mb-3">
            <label for="snippetTitle">Title</label>
            <InputText id="snippetTitle" class="form-control" @bind-Value="_editSnippetModel.Title" />
        </div>
        <div class="form-group mb-3">
            <label for="snippetContent">Content</label>
            <InputTextArea id="snippetContent" class="form-control" @bind-Value="_editSnippetModel.Content" Rows="7"/>
        </div>
        <div class="form-group form-check mb-3">
            <InputCheckbox id="isPublic" class="form-check-input" @bind-Value="_editSnippetModel.IsPublic" />
            <label class="form-check-label" for="isPublic">Make public</label>
        </div>
        <button type="submit" class="btn btn-success w-100">Save</button>
    </EditForm>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private UpdateCodeSnippetCommand? _editSnippetModel;
    private string? _error;
    private bool _initialized = false;
    private bool _isLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized)
        {
            _initialized = true;
            await UserState.InitializeAsync();
            
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);

            try
            {
                var data = await Http.GetFromJsonAsync<SnippetDto>($"/api/snippets/{Id}");
                if (data == null)
                {
                    _error = "Snippet not found.";
                    return;
                }
                _editSnippetModel = new UpdateCodeSnippetCommand
                {
                    Id = data.Id,
                    Title = data.Title,
                    Content = data.Content,
                    IsPublic = data.IsPublic
                };
            }
            catch
            {
                _error = "Error loading snippet.";
            }

            _isLoaded = true;
            StateHasChanged();
        }
    }

    private async Task HandleEdit()
    {
        if (_editSnippetModel == null) return;
        var response = await Http.PutAsJsonAsync($"/api/snippets/{Id}", _editSnippetModel);
        if (response.IsSuccessStatusCode)
            Nav.NavigateTo($"/snippets/{Id}", true);
        else
            _error = "Failed to update snippet.";
    }
}
