@page "/admin/user/{Login}"
@using Application.DTOs.UserDtos
@using Web.AuthService
@inject HttpClient Http
@inject UserState UserState
@inject NavigationManager Nav
@inject IJSRuntime Js

@code {
    [Parameter] public string Login { get; set; } = "";

    private UserDetailsDto? _user;
    private bool _isLoading = true;
    private bool _notFound = false;

    private bool _showPassword = false;
    private bool _showId = false;
    private string passwordInputType => _showPassword ? "text" : "password";

    protected override async Task OnInitializedAsync()
    {
        if (!UserState.IsAuthenticated || UserState.User?.IsAdmin != true)
        {
            Nav.NavigateTo("/");
            return;
        }

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);

        try
        {
            _user = await Http.GetFromJsonAsync<UserDetailsDto>($"/api/admin/user/{Login}");
            _notFound = _user == null;
        }
        catch
        {
            _notFound = true;
        }
        _isLoading = false;
    }

    private async Task ToggleBlockUser()
    {
        if (_user == null) return;
        var response = await Http.PostAsJsonAsync("/api/admin/user/block",
            new { UserId = _user.Id, Block = !_user.IsBlocked });
        if (response.IsSuccessStatusCode)
        {
            _user.IsBlocked = !_user.IsBlocked;
            StateHasChanged();
        }
    }

    private async Task DeleteUser()
    {
        if (_user == null) return;
        if (!await Js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?"))
            return;

        var response = await Http.DeleteAsync($"/api/admin/user/{_user.Id}");
        if (response.IsSuccessStatusCode)
        {
            Nav.NavigateTo("/admin");
        }
    }
}

@if (_isLoading)
{
    <div class="user-details-loading">Loading user data...</div>
}
else if (_notFound)
{
    <div class="user-details-notfound">User not found.</div>
}
else
{
    <div class="user-details-page">
        <div class="user-details-actions">
            <button class="user-details-btn-block btn" @onclick="ToggleBlockUser">
                @(_user!.IsBlocked ? "Unblock" : "Block User")
            </button>
            <button class="user-details-btn-delete btn" @onclick="DeleteUser">
                Delete
            </button>
        </div>
        <h2 class="user-details-title"><b>User: @_user!.Username</b></h2>
        <div class="user-details-info">
            <p>
                <span class="user-details-hint">
                    <b>ID:</b> <span class="user-details-id">@_user.Id.ToString()</span>
                    <span class="user-details-tooltip">@_user.Id.ToString()</span>
                </span>
            </p>
            <p>Email: @_user.Email</p>
            <p>Created At: @_user.CreatedAt.ToString("yyyy-MM-dd HH:mm")</p>
            <p>Is Admin: @(_user.IsAdmin ? "Yes" : "No")</p>
            <p>
                <span class="user-details-hint">
                    <b>Password:</b> <span class="user-details-password">•••••••••••</span>
                    <span class="user-details-tooltip">@_user.PasswordHash</span>
                </span>
            </p>
            @if (_user.IsBlocked && !string.IsNullOrEmpty(_user.BlockedByAdminEmail))
            {
                <p class="user-details-blocked-msg">
                    Account is blocked. Contact admin: @_user.BlockedByAdminEmail
                </p>
            }
        </div>

        <div class="user-details-snippets">
            <h4 class="user-details-block-title">User's Snippets</h4>
            @if (_user.CodeSnippets.Any())
            {
                <ul class="user-details-snippet-list">
                    @foreach (var snip in _user.CodeSnippets)
                    {
                        <li class="user-details-snippet-item">
                            <b>@snip.Title</b> (@snip.Id)<br />
                            Content: <span class="user-details-snippet-content">@snip.Content</span><br />
                            Created: @snip.CreatedAt.ToString("yyyy-MM-dd HH:mm")<br />
                            Updated: @(snip.UpdatedAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")<br />
                            Public: @(snip.IsPublic ? "Yes" : "No")
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="user-details-snippets-empty">No snippets found.</div>
            }
        </div>

        <div class="user-details-sessions">
            <h4 class="user-details-block-title">User's Sessions</h4>
            @if (_user.CollabSessions.Any())
            {
                <ul class="user-details-session-list">
                    @foreach (var sess in _user.CollabSessions)
                    {
                        <li class="user-details-session-item">
                            <b>@sess.Name</b> (@sess.Id)<br />
                            Snippet: @sess.CodeSnippetTitle<br />
                            Created: @sess.CreatedAt.ToString("yyyy-MM-dd HH:mm")<br />
                            Expires: @(sess.ExpiresAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")<br />
                            Edited: @(sess.EditedAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")<br />
                            Active: @(sess.IsActive ? "Yes" : "No")<br />
                            Join Code: @sess.JoinCode<br />
                            Owner: @sess.Owner
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="user-details-sessions-empty">No sessions found.</div>
            }
        </div>

        <div class="user-details-ownedsessions">
            <h4 class="user-details-block-title">Owned Sessions</h4>
            @if (_user.OwnedSessions.Any())
            {
                <ul class="user-details-ownedsession-list">
                    @foreach (var sess in _user.OwnedSessions)
                    {
                        <li class="user-details-ownedsession-item">
                            <b>@sess.Name</b> (@sess.Id)<br />
                            Snippet: @sess.CodeSnippetTitle<br />
                            Created: @sess.CreatedAt.ToString("yyyy-MM-dd HH:mm")<br />
                            Expires: @(sess.ExpiresAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")<br />
                            Edited: @(sess.EditedAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")<br />
                            Active: @(sess.IsActive ? "Yes" : "No")<br />
                            Join Code: @sess.JoinCode<br />
                            Owner: @sess.Owner
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="user-details-owned-sessions-empty">No owned sessions found.</div>
            }
        </div>
    </div>
}
