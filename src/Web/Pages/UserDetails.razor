@page "/admin/user/{Login}"
@using Application.DTOs.UserDtos
@using Web.AuthService
@inject HttpClient Http
@inject UserState UserState
@inject NavigationManager Nav
@inject IJSRuntime Js

@code {
    [Parameter] public string Login { get; set; } = "";

    private UserDetailsDto? _user;
    private bool _isLoading = true;
    private bool notFound = false;

    private bool _showPassword = false;
    private bool _showId = false;
    private string passwordInputType => _showPassword ? "text" : "password";

    protected override async Task OnInitializedAsync()
    {
        if (!UserState.IsAuthenticated || UserState.User?.IsAdmin != true)
        {
            Nav.NavigateTo("/");
            return;
        }

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);

        try
        {
            _user = await Http.GetFromJsonAsync<UserDetailsDto>($"/api/admin/user/{Login}");
            notFound = _user == null;
        }
        catch
        {
            notFound = true;
        }
        _isLoading = false;
    }

    private async Task ToggleBlockUser()
    {
        if (_user == null) return;
        var response = await Http.PostAsJsonAsync("/api/admin/user/block",
            new { UserId = _user.Id, Block = !_user.IsBlocked });
        if (response.IsSuccessStatusCode)
        {
            _user.IsBlocked = !_user.IsBlocked;
            StateHasChanged();
        }
    }

    private async Task DeleteUser()
    {
        if (_user == null) return;
        if (!await Js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?"))
            return;

        var response = await Http.DeleteAsync($"/api/admin/user/{_user.Id}");
        if (response.IsSuccessStatusCode)
        {
            Nav.NavigateTo("/admin");
        }
    }
}

@if (_isLoading)
{
    <div>Loading user data...</div>
}
else if (notFound)
{
    <div>User not found.</div>
}
else
{
    <div class="user-details-container">
        <div style="display:flex; justify-content:flex-end; gap:18px;">
            <button class="btn btn-warning" @onclick="ToggleBlockUser">
                @(_user!.IsBlocked ? "Unblock" : "BlockUser")
            </button>
            <button class="btn btn-danger" @onclick="DeleteUser">
                Delete
            </button>
        </div>
        <h2><b>User: @_user!.Username</b></h2>
        <p>
            <span class="hint-on-hover">
                <b>ID:</b> <span class="masked">@_user.Id.ToString()</span>
                <span class="tooltip">@_user.Id.ToString()</span>
            </span>
        </p>
        <p>Email: @_user.Email</p>
        <p>Created At: @_user.CreatedAt.ToString("yyyy-MM-dd HH:mm")</p>
        <p>Is Admin: @(_user.IsAdmin ? "Yes" : "No")</p>
        <p>
            <span class="hint-on-hover">
                <b>Password:</b> <span class="masked">•••••••••••</span>
                <span class="tooltip">@_user.PasswordHash</span>
            </span>
        </p>
        @if (_user.IsBlocked && !string.IsNullOrEmpty(_user.BlockedByAdminEmail))
        {
            <p style="color:#d00;font-weight:600;">
                Account is blocked. Contact admin: @_user.BlockedByAdminEmail
            </p>
        }

        <h4>Snippets</h4>
        @if (_user.CodeSnippets.Any())
        {
            <ul>
                @foreach (var snip in _user.CodeSnippets)
                {
                    <li>
                        <b>@snip.Title</b> (@snip.Id)<br />
                        Content: <span style="font-family:monospace">@snip.Content</span><br />
                        Created: @snip.CreatedAt.ToString("yyyy-MM-dd HH:mm")<br />
                        Updated: @(snip.UpdatedAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")<br />
                        Public: @(snip.IsPublic ? "Yes" : "No")
                    </li>
                }
            </ul>
        }
        else
        {
            <div>No snippets found.</div>
        }

        <h4>Sessions</h4>
        @if (_user.CollabSessions.Any())
        {
            <ul>
                @foreach (var sess in _user.CollabSessions)
                {
                    <li>
                        <b>@sess.Name</b> (@sess.Id)<br />
                        Snippet: @sess.CodeSnippetTitle<br />
                        Created: @sess.CreatedAt.ToString("yyyy-MM-dd HH:mm")<br />
                        Expires: @(sess.ExpiresAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")<br />
                        Edited: @(sess.EditedAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")<br />
                        Active: @(sess.IsActive ? "Yes" : "No")<br />
                        Join Code: @sess.JoinCode<br />
                        Owner: @sess.Owner
                    </li>
                }
            </ul>
        }
        else
        {
            <div>No sessions found.</div>
        }

        <h4>Owned Sessions</h4>
        @if (_user.OwnedSessions.Any())
        {
            <ul>
                @foreach (var sess in _user.OwnedSessions)
                {
                    <li>
                        <b>@sess.Name</b> (@sess.Id)<br />
                        Snippet: @sess.CodeSnippetTitle<br />
                        Created: @sess.CreatedAt.ToString("yyyy-MM-dd HH:mm")<br />
                        Expires: @(sess.ExpiresAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")<br />
                        Edited: @(sess.EditedAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")<br />
                        Active: @(sess.IsActive ? "Yes" : "No")<br />
                        Join Code: @sess.JoinCode<br />
                        Owner: @sess.Owner
                    </li>
                }
            </ul>
        }
        else
        {
            <div>No owned sessions found.</div>
        }
    </div>
}
