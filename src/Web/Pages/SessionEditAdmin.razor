@page "/admin/session/{Name}"
@inject HttpClient Http
@inject UserState UserState
@inject NavigationManager Nav

@using Application.DTOs.SessionDtos
@using Web.AuthService

<h3 class="admin-session-edit-title">Edit Session</h3>

@if (_isLoading)
{
    <div class="admin-session-edit-loading">Loading...</div>
}
else if (_notFound)
{
    <div class="admin-session-edit-notfound alert alert-warning">Session not found.</div>
}
else if (_session != null)
{
    <EditForm Model="_session" OnValidSubmit="Save" class="admin-session-edit-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="admin-session-edit-field">
            <label class="admin-session-edit-label">Name:</label>
            <InputText @bind-Value="_session.Name" class="form-control" />
        </div>
        <div class="admin-session-edit-field">
            <label class="admin-session-edit-label">Expires At:</label>
            <InputDate @bind-Value="_session.ExpiresAt" class="form-control" />
            <span class="admin-session-edit-help">(optional, if set, session auto-deletes)</span>
        </div>
        <div class="admin-session-edit-field">
            <label class="admin-session-edit-label">Is Active:</label>
            <InputCheckbox @bind-Value="_session.IsActive" />
        </div>
        <div class="admin-session-edit-field">
            <label class="admin-session-edit-label">Owner:</label>
            <input value="@_session.OwnerName" class="form-control" disabled />
        </div>
        <div class="admin-session-edit-field">
            <label class="admin-session-edit-label">Created At:</label>
            <input value="@_session.CreatedAt.ToString("yyyy-MM-dd HH:mm")" class="form-control" disabled />
        </div>
        <div class="admin-session-edit-field">
            <label class="admin-session-edit-label">Snippet Title:</label>
            <input value="@_session.CodeSnippetTitle" class="form-control" disabled />
        </div>
        <div class="admin-session-edit-field">
            <label class="admin-session-edit-label">Join Code:</label>
            <InputText @bind-Value="_session.JoinCode" class="form-control" />
        </div>
        <div class="admin-session-edit-field">
            <label class="admin-session-edit-label">Participants:</label>
            <ul class="admin-session-edit-participants">
                @if (_session.Participants != null)
                {
                    @foreach (var p in _session.Participants)
                    {
                        <li>@p.Username (@p.Email)</li>
                    }
                }
                else
                {
                    <li>None</li>
                }
            </ul>
        </div>
        <button class="btn btn-success admin-session-edit-save-btn" type="submit" disabled="@_isSaving">Save</button>
        <button class="btn btn-danger admin-session-edit-delete-btn" type="button" @onclick="ShowDeleteModal" disabled="@_isSaving">Delete</button>
        @if (_saved)
        {
            <span class="admin-session-edit-saved text-success ms-3">Saved!</span>
        }
        @if (!string.IsNullOrEmpty(_error))
        {
            <div class="admin-session-edit-error alert alert-danger mt-2">@_error</div>
        }
    </EditForm>
}

@if (_showDeleteModal)
{
    <div class="modal-backdrop">
        <div class="modal-dialog">
            <h5 style="margin-bottom:18px;">Delete session <span style="color:#b82c2c">@_session?.Name</span>?</h5>
            <p>Are you sure you want to delete this session? This action cannot be undone.</p>
            <div style="display:flex;justify-content:flex-end;gap:10px;margin-top:24px;">
                <button class="btn btn-secondary" @onclick="CloseDeleteModal" disabled="@_isSaving">Cancel</button>
                <button class="btn btn-danger" @onclick="DeleteSession" disabled="@_isSaving">Delete</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Name { get; set; } = "";

    private CollabSessionDetailsDto? _session;
    private bool _isLoading = true;
    private bool _notFound = false;
    private string? _error;
    private bool _isSaving = false;
    private bool _saved = false;
    private bool _showDeleteModal = false;

    protected override async Task OnInitializedAsync()
    {
        if (!UserState.IsAuthenticated || UserState.User?.IsAdmin != true)
        {
            Nav.NavigateTo("/");
            return;
        }

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);

        try
        {
            _session = await Http.GetFromJsonAsync<CollabSessionDetailsDto>($"/api/admin/session?name={Uri.EscapeDataString(Name)}");
            _notFound = _session == null;
        }
        catch
        {
            _notFound = true;
        }
        _isLoading = false;
    }

    private async Task Save()
    {
        _error = null;
        _saved = false;
        _isSaving = true;
        try
        {
            var response = await Http.PutAsJsonAsync("/api/admin/session", _session);
            if (response.IsSuccessStatusCode)
            {
                _saved = true;
            }
            else
            {
                _error = "Failed to save session.";
            }
        }
        catch
        {
            _error = "Failed to save session.";
        }
        _isSaving = false;
    }

    private void ShowDeleteModal()
    {
        _showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        _showDeleteModal = false;
    }

    private async Task DeleteSession()
    {
        _error = null;
        _isSaving = true;
        try
        {
            var response = await Http.DeleteAsync($"/api/admin/session/{Uri.EscapeDataString(Name)}");
            if (response.IsSuccessStatusCode)
            {
                Nav.NavigateTo("/admin?sessions");
            }
            else
            {
                var msg = await response.Content.ReadAsStringAsync();
                _error = "Failed to delete session. Server: " + msg;
            }
        }
        catch (Exception ex)
        {
            _error = "Failed to delete session. " + ex.Message;
        }
        _isSaving = false;
        _showDeleteModal = false;
    }
}
