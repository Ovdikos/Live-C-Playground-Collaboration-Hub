@page "/register"
@using Application.DTOs.LoginRegisterDtos
@using Application.DTOs.UserDtos
@using Web.AuthService
@inject HttpClient Http
@inject NavigationManager Nav
@inject UserState UserState
@inject IJSRuntime Js

<EditForm class="register-form-card" Model="_register" OnValidSubmit="HandleRegister" FormName="registerForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="register-form-group">
        <label for="username" class="register-label">Login</label>
        <InputText id="username" class="register-input" @bind-Value="_register.Username" />
    </div>
    <div class="register-form-group">
        <label for="password" class="register-label">Password</label>
        <InputText id="password" type="password" class="register-input" @bind-Value="_register.Password" />
    </div>
    <div class="register-form-group">
        <label for="email" class="register-label">Email</label>
        <InputText id="email" type="email" class="register-input" @bind-Value="_register.Email" />
    </div>
    <div class="register-form-group">
        <label class="register-label">Avatar (optional)</label>
        <div class="register-avatar-upload">
            <label class="register-avatar-file-label">
                Choose Avatar
                <InputFile @ref="_fileInputRef" OnChange="OnInputFileChange" class="register-avatar-file-input" accept="image/png, image/jpeg" />
            </label>
            @if (!string.IsNullOrEmpty(_avatarFileName))
            {
                <span class="register-avatar-selected-file">@_avatarFileName</span>
            }
        </div>
        @if (!string.IsNullOrEmpty(_avatarPreview))
        {
            <img src="@_avatarPreview" class="register-avatar-preview" alt="Avatar Preview" />
        }
    </div>
    <button class="register-btn-submit" type="submit">Register</button>
    <div class="register-form-bottom-link">
        <a href="/login">Already have an account? Login</a>
    </div>
</EditForm>

<CropperModal Show="@_showCropper"
              ImageUrl="@_cropperImageUrl"
              OnCrop="@OnAvatarCropped"
              OnClose="@CloseCropperModal" />

@if (!string.IsNullOrEmpty(_error))
{
    <div class="register-error-msg">@_error</div>
}

@code {
    private RegisterUserDto _register = new();
    private string? _error;

    private IBrowserFile? _avatarFile;
    private string? _avatarPreview;
    private string? _avatarBase64;
    private bool _showCropper = false;
    private string? _cropperImageUrl;
    private InputFile _fileInputRef;
    private string? _avatarFileName;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        _avatarFile = e.File;
        _avatarFileName = _avatarFile?.Name;
        var buffer = new byte[_avatarFile.Size];
        await _avatarFile.OpenReadStream(5 * 1024 * 1024).ReadAsync(buffer);
        _cropperImageUrl = $"data:{_avatarFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        _showCropper = true;
    }

    private async Task OnAvatarCropped(string? croppedBase64)
    {
        _avatarPreview = croppedBase64;
        _avatarBase64 = croppedBase64;
        _showCropper = false;
        StateHasChanged();
    }

    private async Task CloseCropperModal()
    {
        _showCropper = false;
        await Js.InvokeVoidAsync("focusElement", _fileInputRef);
        StateHasChanged();
    }

    private async Task HandleRegister()
    {
        _error = null;
        if (string.IsNullOrWhiteSpace(_register.Username) ||
            string.IsNullOrWhiteSpace(_register.Password) ||
            string.IsNullOrWhiteSpace(_register.Email))
        {
            _error = "Please fill in all required fields!";
            return;
        }

        var content = new MultipartFormDataContent();
        content.Add(new StringContent(_register.Username), "Username");
        content.Add(new StringContent(_register.Password), "Password");
        content.Add(new StringContent(_register.Email), "Email");

        if (!string.IsNullOrEmpty(_avatarBase64))
        {
            var base64Data = _avatarBase64.Substring(_avatarBase64.IndexOf(",") + 1);
            var bytes = Convert.FromBase64String(base64Data);
            var byteContent = new ByteArrayContent(bytes);
            byteContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("image/png");
            content.Add(byteContent, "Avatar", "avatar.png");
        }

        var response = await Http.PostAsync("/api/auth/register", content);

        if (!response.IsSuccessStatusCode)
        {
            _error = "Login or email are already taken.";
            return;
        }

        var result = await response.Content.ReadFromJsonAsync<AuthResult>();
        if (result is not null)
        {
            await UserState.SetAuthAsync(result.Token, result.User);
            Nav.NavigateTo("/");
        }
    }

    public class AuthResult
    {
        public string Token { get; set; } = default!;
        public UserDto User { get; set; } = default!;
    }
}
