@page "/register"
@using Application.AuthService
@inject HttpClient Http
@inject NavigationManager Nav
@inject UserState UserState

<EditForm Model="register" OnValidSubmit="HandleRegister" FormName="registerForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username">Username</label>
        <InputText id="username"
                   class="form-control"
                   @bind-Value="register.Username" />
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password"
                   type="password"
                   class="form-control"
                   @bind-Value="register.Password" />
    </div>

    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email"
                   type="email"
                   class="form-control"
                   @bind-Value="register.Email" />
    </div>

    <div class="mb-3">
        <label for="avatar">Avatar URL (optional)</label>
        <InputText id="avatar"
                   class="form-control"
                   @bind-Value="register.AvatarUrl" />
    </div>

    <button class="btn btn-success w-100" type="submit">Register</button>

    <div class="text-center mt-3">
        <a href="/login">Already have an account? Login</a>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}

@code {
    // Обов’язково DTO, а не команда з Mediatr
    private Application.DTOs.RegisterUserDto register = new();
    private string? error;

    private async Task HandleRegister()
    {
        // Цей код виконається тільки після сабміту Blazor (OnValidSubmit)
        error = null;

        // Перевіряємо що поля не порожні
        if (string.IsNullOrWhiteSpace(register.Username) ||
            string.IsNullOrWhiteSpace(register.Password) ||
            string.IsNullOrWhiteSpace(register.Email))
        {
            error = "Please fill in all required fields!";
            return;
        }

        // Відправляємо JSON на сервер
        var response = await Http.PostAsJsonAsync("/api/auth/register", register);

        if (!response.IsSuccessStatusCode)
        {
            error = "Registration failed.";
            return;
        }

        var result = await response.Content.ReadFromJsonAsync<AuthResult>();
        if (result is not null)
        {
            UserState.SetAuth(result.token, result.user);
            Nav.NavigateTo("/snippets");
        }
    }

    public class AuthResult
    {
        public string token { get; set; } = default!;
        public Application.DTOs.UserDto user { get; set; } = default!;
    }
}
