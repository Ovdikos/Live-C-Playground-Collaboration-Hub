@page "/admin"
@inject UserState UserState
@inject NavigationManager Nav
@inject HttpClient Http

@if (!isLoaded)
{
    <div style="margin-top:50px; text-align:center;">
        <span>Loading...</span>
    </div>
}
else if (UserState.User?.IsAdmin != true)
{
    Nav.NavigateTo("/");
}
else
{
    <div class="admin-panel-container">
        <h1 class="admin-title">Admin Panel</h1>

        <div class="admin-tabs">
            <button class="admin-tab-btn @(activeTab == "users" ? "active" : "")" @onclick="@(() => SetTab("users"))">Users</button>
            <button class="admin-tab-btn @(activeTab == "snippets" ? "active" : "")" @onclick="@(() => SetTab("snippets"))">Snippets</button>
            <button class="admin-tab-btn @(activeTab == "sessions" ? "active" : "")" @onclick="@(() => SetTab("sessions"))">Sessions</button>
            <button class="admin-tab-btn @(activeTab == "stats" ? "active" : "")" @onclick="@(() => SetTab("stats"))">Stats</button>
        </div>

        <div class="admin-content">
            @if (activeTab == "users")
            {
                <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 1rem;">
                    <h3 style="margin: 0;">Users List</h3>
                    <button class="btn btn-primary" style="height: 2.2rem;" @onclick="ShowFindUserModal">Find User</button>
                </div>
                @if (users == null)
                {
                    <span>Loading users...</span>
                }
                else if (users.Count == 0)
                {
                    <span>No users found.</span>
                }
                else
                {
                    <table class="table">
                        <thead>
                        <tr>
                            <th @onclick="@(() => SortBy("id"))" style="cursor:pointer;">ID @SortIcon("id")</th>
                            <th @onclick="@(() => SortBy("username"))" style="cursor:pointer;">Username @SortIcon("username")</th>
                            <th @onclick="@(() => SortBy("email"))" style="cursor:pointer;">Email @SortIcon("email")</th>
                            <th @onclick="@(() => SortBy("createdat"))" style="cursor:pointer;">Created At @SortIcon("createdat")</th>
                            <th @onclick="@(() => SortBy("isadmin"))" style="cursor:pointer;">IsAdmin @SortIcon("isadmin")</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var u in users)
                        {
                            <tr>
                                <td>@u.Id</td>
                                <td>@u.Username</td>
                                <td>@u.Email</td>
                                <td>@u.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>@(u.IsAdmin ? "Yes" : "No")</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            }
            else if (activeTab == "snippets")
            {
                <div>
                    <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 1rem;">
                        <h3 style="margin: 0;">Snippets Management</h3>
                        <button class="btn btn-primary" style="height: 2.2rem;" @onclick="ShowFindSnippetModal">Find Snippet</button>
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <span>Filter: </span>
                        <button class="btn btn-secondary btn-sm" @onclick="@(() => SetSnippetsFilter(null))">All</button>
                        <button class="btn btn-success btn-sm" @onclick="@(() => SetSnippetsFilter(true))">Public</button>
                        <button class="btn btn-warning btn-sm" @onclick="@(() => SetSnippetsFilter(false))">Private</button>
                    </div>
                    @if (snippetsLoading)
                    {
                        <div>Loading snippets...</div>
                    }
                    else if (snippets == null || snippets.Count == 0)
                    {
                        <div>No snippets found.</div>
                    }
                    else
                    {
                        <table class="table">
                            <thead>
                            <tr>
                                <th>Title</th>
                                <th>Owner</th>
                                <th>Is Public</th>
                                <th>Created At</th>
                                <th>Updated At</th>
                                <th>Content</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var s in snippets)
                            {
                                <tr>
                                    <td>@s.Title</td>
                                    <td>@s.OwnerName</td>
                                    <td>@(s.IsPublic ? "Yes" : "No")</td>
                                    <td>@s.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@(s.UpdatedAt.ToString("yyyy-MM-dd HH:mm") ?? "—")</td>
                                    <td>
                                        <pre style="max-width:350px; overflow-x:auto; background:#f8f9fa; border-radius:6px; padding:8px 10px;">@s.Content</pre>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    }
                </div>
            }
            else if (activeTab == "sessions")
            {
                <div>
                    <h3>Sessions Management</h3>
                    <div style="margin-bottom: 1rem;">
                        <input class="form-control" style="width:180px;display:inline;margin-right:8px;"
                               @bind="sessionSearch" placeholder="Search..." />
                        <select class="form-control" style="width:120px;display:inline;margin-right:8px;"
                                @bind="sessionIsActive">
                            <option value="">All</option>
                            <option value="true">Active</option>
                            <option value="false">Inactive</option>
                        </select>
                        <input class="form-control" style="width:160px;display:inline;margin-right:8px;"
                               type="number" min="0" @bind="minParticipants" placeholder="Min participants" />
                        <button class="btn btn-primary" @onclick="LoadSessions">Filter</button>
                    </div>

                    @if (isLoadingSessions)
                    {
                        <span>Loading sessions...</span>
                    }
                    else if (sessions is null || sessions.Count == 0)
                    {
                        <span>No sessions found.</span>
                    }
                    else
                    {
                        <table class="table">
                            <thead>
                            <tr>
                                <th>Name</th>
                                <th>Snippet</th>
                                <th>Created At</th>
                                <th>Expires</th>
                                <th>Active</th>
                                <th>Join Code</th>
                                <th>Owner</th>
                                <th>Participants</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var sess in sessions)
                            {
                                <tr>
                                    <td>@sess.Name</td>
                                    <td>@sess.CodeSnippetTitle</td>
                                    <td>@sess.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@(sess.ExpiresAt?.ToString("yyyy-MM-dd HH:mm") ?? "—")</td>
                                    <td>@(sess.IsActive ? "Yes" : "No")</td>
                                    <td>@sess.JoinCode</td>
                                    <td>@sess.OwnerName</td>
                                    <td>
                                        @foreach (var p in sess.Participants)
                                        {
                                            <div>@p.Username (@p.Email)</div>
                                        }
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    }
                </div>
            }
            else if (activeTab == "stats")
            {
                <p>Statistics and analytics here...</p>
            }
        </div>
    </div>
}

@if (showFindUserModal)
{
    <div class="modal-backdrop">
        <div class="modal-dialog">
            <h5 style="margin-bottom:12px;">Find User</h5>
            <input class="form-control" @bind="findUserName" placeholder="Enter username..." autofocus  @onkeydown="OnFindUserKeyDown" />
            <div style="display:flex;justify-content:flex-end;gap:10px;margin-top:18px;">
                <button class="btn btn-secondary" @onclick="CloseFindUserModal">Cancel</button>
                <button class="btn btn-primary" @onclick="FindUser">Find</button>
            </div>
            @if (!string.IsNullOrEmpty(findUserError))
            {
                <div style="color:#d00;margin-top:10px;">@findUserError</div>
            }
        </div>
    </div>
}

@if (showFindSnippetModal)
{
    <div class="modal-backdrop">
        <div class="modal-dialog">
            <h5 style="margin-bottom:12px;">Find Snippet</h5>
            <input class="form-control" @bind="findSnippetTitle" placeholder="Enter snippet title..." autofocus @onkeydown="OnFindSnippetKeyDown" />
            <div style="display:flex;justify-content:flex-end;gap:10px;margin-top:18px;">
                <button class="btn btn-secondary" @onclick="CloseFindSnippetModal">Cancel</button>
                <button class="btn btn-primary" @onclick="FindSnippet">Find</button>
            </div>
            @if (!string.IsNullOrEmpty(findSnippetError))
            {
                <div style="color:#d00;margin-top:10px;">@findSnippetError</div>
            }
        </div>
    </div>
}

@code {
    private string activeTab = "users";
    private bool isLoaded = false;
    private bool initialized = false;

    private List<UserDto>? users;

    private string? orderBy = null;
    private bool desc = false;

    //FIND USER
    private bool showFindUserModal = false;
    private string findUserName = "";
    private string findUserError = "";

    // FIND SNIPPET
    private bool showFindSnippetModal = false;
    private string findSnippetTitle = "";
    private string findSnippetError = "";

    // SNIPPETS
    private List<SnippetDto>? snippets;
    private bool? filterIsPublic = null;
    private bool snippetsLoading = false;

    // SESSIONS
    private List<CollabSessionDetailsDto>? sessions;
    private string? sessionSearch = null;
    private bool? sessionIsActive = null;
    private int? minParticipants = null;
    private bool isLoadingSessions = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!initialized)
        {
            initialized = true;
            await UserState.InitializeAsync();
            isLoaded = true;
            if (UserState.User?.IsAdmin == true)
            {
                await LoadUsers();
                if (activeTab == "snippets")
                    await LoadSnippets();
                if (activeTab == "sessions")
                    await LoadSessions();
            }
            StateHasChanged();
        }
    }

    private void SetTab(string tab)
    {
        activeTab = tab;
        if (tab == "users")
            _ = LoadUsers();
        else if (tab == "snippets")
            _ = LoadSnippets();
        else if (tab == "sessions")
            _ = LoadSessions();
    }

    private async Task SortBy(string field)
    {
        if (orderBy == field)
            desc = !desc;
        else
        {
            orderBy = field;
            desc = false;
        }
        await LoadUsers();
    }

    private RenderFragment SortIcon(string field) => builder =>
    {
        if (orderBy == field)
        {
            builder.OpenElement(0, "span");
            builder.AddAttribute(1, "style", "font-size:12px;margin-left:4px;");
            builder.AddContent(2, desc ? "▼" : "▲");
            builder.CloseElement();
        }
    };

    private async Task LoadUsers()
    {
        users = null;
        Http.DefaultRequestHeaders.Authorization = null;
        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);

        var url = "/api/admin/users";
        var queryParams = new List<string>();
        if (!string.IsNullOrEmpty(orderBy))
            queryParams.Add($"orderBy={orderBy}");
        if (desc)
            queryParams.Add("desc=true");
        if (queryParams.Count > 0)
            url += "?" + string.Join("&", queryParams);

        try
        {
            users = await Http.GetFromJsonAsync<List<UserDto>>(url);
        }
        catch
        {
            users = new List<UserDto>();
        }
        StateHasChanged();
    }

    private async Task LoadSnippets()
    {
        snippetsLoading = true;
        snippets = null;
        StateHasChanged();
        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);

        var url = "/api/admin/snippets";
        if (filterIsPublic.HasValue)
            url += $"?isPublic={filterIsPublic.Value.ToString().ToLower()}";

        try
        {
            snippets = await Http.GetFromJsonAsync<List<SnippetDto>>(url);
        }
        catch
        {
            snippets = new List<SnippetDto>();
        }
        snippetsLoading = false;
        StateHasChanged();
    }

    private async Task SetSnippetsFilter(bool? isPublic)
    {
        filterIsPublic = isPublic;
        await LoadSnippets();
    }

    private async Task LoadSessions()
    {
        isLoadingSessions = true;
        sessions = null;
        StateHasChanged();
        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);

        var url = "/api/admin/sessions?";
        if (!string.IsNullOrWhiteSpace(sessionSearch)) url += $"search={sessionSearch}&";
        if (sessionIsActive.HasValue) url += $"isActive={sessionIsActive}&";
        if (minParticipants.HasValue) url += $"minParticipants={minParticipants}&";

        try
        {
            sessions = await Http.GetFromJsonAsync<List<CollabSessionDetailsDto>>(url);
        }
        catch
        {
            sessions = new List<CollabSessionDetailsDto>();
        }
        isLoadingSessions = false;
        StateHasChanged();
    }

    private void ShowFindUserModal()
    {
        findUserName = "";
        findUserError = "";
        showFindUserModal = true;
    }

    private void CloseFindUserModal()
    {
        showFindUserModal = false;
        findUserError = "";
        findUserName = "";
    }

    private async Task FindUser()
    {
        findUserError = "";
        if (string.IsNullOrWhiteSpace(findUserName))
        {
            findUserError = "Enter username!";
            return;
        }
        Nav.NavigateTo($"/admin/user/{findUserName.Trim()}");
        showFindUserModal = false;
    }

    private void OnFindUserKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            _ = FindUser();
        else if (e.Key == "Escape")
            CloseFindUserModal();
    }

    // FIND SNIPPET
    private void ShowFindSnippetModal()
    {
        findSnippetTitle = "";
        findSnippetError = "";
        showFindSnippetModal = true;
    }

    private void CloseFindSnippetModal()
    {
        showFindSnippetModal = false;
        findSnippetError = "";
        findSnippetTitle = "";
    }

    private async Task FindSnippet()
    {
        findSnippetError = "";
        if (string.IsNullOrWhiteSpace(findSnippetTitle))
        {
            findSnippetError = "Enter snippet title!";
            return;
        }
        Nav.NavigateTo($"/admin/snippet/{findSnippetTitle.Trim()}");
        showFindSnippetModal = false;
    }

    private void OnFindSnippetKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            _ = FindSnippet();
        else if (e.Key == "Escape")
            CloseFindSnippetModal();
    }
}
