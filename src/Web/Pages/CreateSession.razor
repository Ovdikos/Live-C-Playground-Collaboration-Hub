@page "/sessions/create"
@using Application.DTOs.SessionDtos
@using Application.DTOs.SnippetsDtos
@using Web.AuthService
@inject HttpClient Http
@inject UserState UserState
@inject NavigationManager Nav

<div class="create-session-page">
    <h3 class="create-session-title">Create New Session</h3>

    <EditForm Model="_session" OnValidSubmit="HandleCreate">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="create-session-field">
            <label class="create-session-label">Session Name</label>
            <InputText class="create-session-input" @bind-Value="_session.Name" />
        </div>
        <div class="create-session-field">
            <label class="create-session-label">For Snippet</label>
            <InputSelect class="create-session-input" @bind-Value="_session.CodeSnippetId">
                <option value="">-- Select snippet --</option>
                @foreach (var s in _snippets)
                {
                    <option value="@s.Id">@s.Title</option>
                }
            </InputSelect>
        </div>
        <div class="create-session-field">
            <label class="create-session-label">Join Code</label>
            <InputText class="create-session-input" @bind-Value="_session.JoinCode" />
            <small class="create-session-hint">
                This code will be required to join the session. Example: <b>abcd1234</b>
            </small>
        </div>
        <button type="submit" class="create-session-btn">Create</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="create-session-error">@_error</div>
    }
</div>

@code {
    private readonly CreateSessionCommand _session = new();
    private List<SnippetDto> _snippets = new();
    private string? _error;
    private bool _initialized = false;
    private bool _isLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized)
        {
            _initialized = true;
            await UserState.InitializeAsync();

            if (!UserState.IsAuthenticated || UserState.User is null)
            {
                Nav.NavigateTo("/login");
                return;
            }
            _snippets = await Http.GetFromJsonAsync<List<SnippetDto>>($"/api/snippets?ownerId={UserState.User.Id}");
            _session.OwnerId = UserState.User.Id;

            _isLoaded = true;
            StateHasChanged();
        }
    }

    private async Task HandleCreate()
    {
        _error = null;
        var response = await Http.PostAsJsonAsync("/api/sessions", _session);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<CollabSessionDto>();
            Nav.NavigateTo($"/sessions/{result!.Id}");
        }
        else
        {
            _error = "Failed to create session.";
        }
    }

    public class CreateSessionCommand
    {
        [Required]
        public string Name { get; set; } = "";
        [Required]
        public Guid CodeSnippetId { get; set; }
        public Guid OwnerId { get; set; }
        [Required]
        public string JoinCode { get; set; } = "";
    }
}
