@page "/login"
@using Application.DTOs.LoginRegisterDtos
@using Application.DTOs.UserDtos
@using Web.AuthService
@inject HttpClient Http
@inject NavigationManager Nav
@inject UserState UserState

<EditForm Model="_login" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Login</label>
        <InputText class="form-control" @bind-Value="_login.Login" />
    </div>
    <div class="mb-3">
        <label>Password</label>
        <InputText class="form-control" type="password" @bind-Value="_login.Password" />
    </div>
    <button class="btn btn-primary w-100" type="submit">Login</button>
    <div class="text-center mt-3">
        <a href="/register">Don't have an account? Register</a>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger">@_error</div>
}

@code {
    private LoginUserDto _login = new();
    private string? _error;

    private async Task HandleLogin()
    {
        _error = null;
        var response = await Http.PostAsJsonAsync("/api/auth/login", _login);
        if (!response.IsSuccessStatusCode)
        {
            var errorObj = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
            _error = errorObj?["error"] ?? "Login failed.";
            return;
        }
        var result = await response.Content.ReadFromJsonAsync<AuthResult>();
        if (result is not null)
        {
            await UserState.SetAuthAsync(result.token, result.user);
            Nav.NavigateTo("/");
        }
    }

    public class AuthResult
    {
        public string token { get; set; } = default!;
        public UserDto user { get; set; } = default!;
    }
}