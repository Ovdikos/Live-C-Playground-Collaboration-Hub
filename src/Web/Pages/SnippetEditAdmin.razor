@page "/admin/snippet/{Title}"
@inject HttpClient Http
@inject UserState UserState
@inject NavigationManager Nav

@using System.Net.Http.Json
@using Application.DTOs
@using Application.DTOs.SnippetsDtos
@using Web.AuthService

<h3>Edit Snippet</h3>

@if (_isLoading)
{
    <div>Loading...</div>
}
else if (_notFound)
{
    <div class="alert alert-warning">Snippet not found.</div>
}
else if (_snippet != null)
{
    <EditForm Model="_snippet" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Title:</label>
            <InputText @bind-Value="_snippet.Title" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Content:</label>
            <InputTextArea @bind-Value="_snippet.Content" class="form-control" rows="6" />
        </div>
        <div class="mb-3">
            <label class="form-label">Is Public:</label>
            <InputCheckbox @bind-Value="_snippet.IsPublic" />
        </div>
        <div class="mb-3">
            <label class="form-label">Created At:</label>
            <input value="@(_snippet.CreatedAt.ToString("yyyy-MM-dd HH:mm"))" class="form-control" disabled />
        </div>
        <div class="mb-3">
            <label class="form-label">Updated At:</label>
            <input value="@(_snippet.UpdatedAt.ToString("yyyy-MM-dd HH:mm") ?? "—")" class="form-control" disabled />
        </div>
        <div class="mb-3">
            <label class="form-label">Owner:</label>
            <input value="@_snippet.OwnerName" class="form-control" disabled />
        </div>
        <button class="btn btn-success" type="submit" disabled="@_isSaving">Save</button>
        <button class="btn btn-danger ms-3" type="button" @onclick="ShowDeleteConfirm" disabled="@_isSaving">Delete</button>
        @if (_saved)
        {
            <span class="text-success ms-3">Saved!</span>
        }
        @if (!string.IsNullOrEmpty(_error))
        {
            <div class="alert alert-danger mt-2">@_error</div>
        }
    </EditForm>
}

@if (_showDeleteConfirm)
{
    <div class="modal-backdrop" style="z-index:2000;">
        <div class="modal-dialog">
            <h5>Delete this snippet?</h5>
            <div style="margin-bottom:10px;">Are you sure you want to delete "<b>@_snippet?.Title</b>"?</div>
            <div style="display:flex;justify-content:flex-end;gap:12px;">
                <button class="btn btn-secondary" @onclick="CancelDelete" disabled="@_isSaving">Cancel</button>
                <button class="btn btn-danger" @onclick="DeleteSnippet" disabled="@_isSaving">Delete</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Title { get; set; } = "";

    private SnippetDto? _snippet;
    private bool _isLoading = true;
    private bool _notFound = false;
    private string? _error;
    private bool _isSaving = false;
    private bool _saved = false;
    private bool _showDeleteConfirm = false;

    protected override async Task OnInitializedAsync()
    {
        if (!UserState.IsAuthenticated || UserState.User?.IsAdmin != true)
        {
            Nav.NavigateTo("/");
            return;
        }

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);

        try
        {
            _snippet = await Http.GetFromJsonAsync<SnippetDto>($"/api/admin/snippet?title={Uri.EscapeDataString(Title)}");
            _notFound = _snippet == null;
        }
        catch
        {
            _notFound = true;
        }
        _isLoading = false;
    }

    private async Task Save()
    {
        _error = null;
        _saved = false;
        _isSaving = true;
        try
        {
            var response = await Http.PutAsJsonAsync("/api/admin/snippet", _snippet);
            if (response.IsSuccessStatusCode)
            {
                _saved = true;
            }
            else
            {
                _error = "Failed to save snippet.";
            }
        }
        catch
        {
            _error = "Failed to save snippet.";
        }
        _isSaving = false;
    }

    private void ShowDeleteConfirm()
    {
        _showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        _showDeleteConfirm = false;
    }

    private async Task DeleteSnippet()
    {
        if (_snippet == null) return;
        _isSaving = true;
        _error = null;
        try
        {
            var response = await Http.DeleteAsync($"/api/admin/snippet/{_snippet.Id}");
            if (response.IsSuccessStatusCode)
            {
                Nav.NavigateTo("/admin?tab=snippets", true);
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                _error = $"Failed to delete snippet. Server: {content}";

            }
        }
        catch
        {
            _error = "Failed to delete snippet.";
        }
        _isSaving = false;
        _showDeleteConfirm = false;
    }
}
