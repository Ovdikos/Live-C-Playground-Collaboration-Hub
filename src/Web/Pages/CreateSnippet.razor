@page "/snippets/new"
@using Application.Features.CodeSnippets.Commands.CreateCodeSnippet
@using Web.AuthService
@inject HttpClient Http
@inject UserState UserState
@inject NavigationManager Nav

<div class="create-snippet-page">
    <h3 class="create-snippet-title">Create New Snippet</h3>

    <EditForm Model="_snippet" OnValidSubmit="HandleCreate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="create-snippet-field">
            <label class="create-snippet-label">Title</label>
            <InputText class="create-snippet-input" @bind-Value="_snippet.Title" />
        </div>
        <div class="create-snippet-field">
            <label class="create-snippet-label">Content</label>
            <InputTextArea class="create-snippet-input" @bind-Value="_snippet.Content" Rows="7"/>
        </div>
        <div class="create-snippet-checkbox-field">
            <InputCheckbox class="create-snippet-checkbox" @bind-Value="_snippet.IsPublic" />
            <label class="create-snippet-checkbox-label">Make public</label>
        </div>
        <button type="submit" class="create-snippet-btn">Create</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="create-snippet-error">@_error</div>
    }
</div>

@code {
    private readonly CreateCodeSnippetCommand _snippet = new();
    private string? _error;

    private async Task HandleCreate()
    {
        _error = null;
        if (!UserState.IsAuthenticated || UserState.User == null)
        {
            _error = "You must be logged in.";
            return;
        }

        _snippet.OwnerId = UserState.User.Id;

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);

        var response = await Http.PostAsJsonAsync("/api/snippets", _snippet);

        if (response.IsSuccessStatusCode)
        {
            var id = await response.Content.ReadFromJsonAsync<Guid>();
            Nav.NavigateTo($"/snippets/{id}", true);
        }
        else
        {
            _error = "Failed to create snippet.";
        }
        Nav.NavigateTo("/snippets");
    }
}
