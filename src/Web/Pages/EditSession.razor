@page "/sessions/{Id:guid}/edit"
@using Application.DTOs.SessionDtos
@using Application.Features.CollabSessions.Commands.EditCollabSession
@using Web.AuthService
@inject HttpClient Http
@inject UserState UserState
@inject NavigationManager Nav

<h3 class="fw-bold mb-4">Edit SessionDtos</h3>

@if (_collabSession == null)
{
    <div>Loading...</div>
}
else
{
    <EditForm Model="_collabSession" OnValidSubmit="HandleEdit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label>SessionDtos Name</label>
            <InputText class="form-control" @bind-Value="_collabSession.Name" />
        </div>
        <div class="mb-3">
            <label>Code Content</label>
            <InputTextArea class="form-control" @bind-Value="_collabSession.Content" Rows="12" />
        </div>
        <div class="mb-3">
            <label>Change Comment (commit message)</label>
            <InputText class="form-control" @bind-Value="_collabSession.Changes" />
        </div>
        <button type="submit" class="btn btn-success w-100">Save</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger mt-3">@_error</div>
}

<h5 class="mt-5">Edit History</h5>
@if (_history != null && _history.Any())
{
    <ul class="list-group">
        @foreach (var h in _history)
        {
            <li class="list-group-item">
                <strong>@h.EditedByUsername</strong>
                <span class="ms-2 text-muted">@h.EditedAt.ToLocalTime().ToString("g")</span>
                <div class="small">@h.Changes</div>
            </li>
        }
    </ul>
}

@code {
    [Parameter] public Guid Id { get; set; }
    private EditCollabSessionCommand _collabSession = new();
    private List<SessionEditHistoryDto> _history = new();
    private string? _error;
    private bool _initialized = false;
    private bool _isLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized)
        {
            _initialized = true;
            await UserState.InitializeAsync();
            
            var dto = await Http.GetFromJsonAsync<CollabSessionDto>($"/api/sessions/{Id}");
            if (dto == null)
            {
                _error = "SessionDtos not found";
                return;
            }
            _collabSession.SessionId = dto.Id;
            _collabSession.Name = dto.Name;
            _collabSession.Content = dto.Content ?? "";
            _collabSession.EditedByUserId = UserState.User!.Id;
            _collabSession.Changes = "";

            _history = await Http.GetFromJsonAsync<List<SessionEditHistoryDto>>($"/api/sessions/{Id}/history");

            _isLoaded = true;
            StateHasChanged();
        }
        
        
    }

    private async Task HandleEdit()
    {
        _error = null;
        var resp = await Http.PutAsJsonAsync($"/api/sessions/{Id}", _collabSession);
        if (resp.IsSuccessStatusCode)
        {
            Nav.NavigateTo($"/sessions/{Id}", true);
        }
        else _error = "SessionDtos is not active";
    }
}
