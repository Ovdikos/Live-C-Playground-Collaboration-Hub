@using System.Text
@inject IJSRuntime Js

@if (Show)
{
    <div @ref="_modalRef" class="modal-overlay" tabindex="-1">
        <div class="modal-dialog-custom">
            <div class="modal-header-custom">
                <h5>Crop avatar</h5>
                <button @onclick="Close" class="btn-close-modal">&times;</button>
            </div>
            <div class="modal-body-custom">
                <div style="display:inline-block;position:relative;">
                    <img id="cropper-image" src="@ImageUrl" style="max-width:320px;max-height:320px; border-radius: 0.8rem;" />
                    <div style="position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;">
                        <svg width="100%" height="100%">
                            <circle cx="50%" cy="50%" r="47%" stroke="rgba(33,33,33,0.28)" stroke-width="3" fill="none" />
                        </svg>
                    </div>
                </div>
            </div>
            <div class="modal-footer-custom">
                <button @onclick="Close" class="btn btn-secondary">Cancel</button>
                <button @onclick="Crop" class="btn btn-success">Crop</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public string? ImageUrl { get; set; }
    [Parameter] public EventCallback<string> OnCrop { get; set; }

    private bool _cropperInit = false;
    private ElementReference _modalRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Show && !_cropperInit && ImageUrl != null)
        {
            await Js.InvokeVoidAsync("initCropper", "cropper-image");
            _cropperInit = true;
            await Js.InvokeVoidAsync("focusElement", _modalRef);
        }
        else if (!Show && _cropperInit)
        {
            await Js.InvokeVoidAsync("destroyCropper");
            _cropperInit = false;
        }
    }
    
    private async Task<string> GetLargeBase64FromJsAsync()
    {
        int totalLength = await Js.InvokeAsync<int>("exportImageToBuffer");
        if (totalLength == 0)
            return "";

        var chunkSize = 16000; 
        var sb = new StringBuilder(totalLength);

        for (int i = 0; i < totalLength; i += chunkSize)
        {
            var chunk = await Js.InvokeAsync<string>("getBase64Chunk", i, Math.Min(i + chunkSize, totalLength));
            sb.Append(chunk);
        }

        await Js.InvokeVoidAsync("clearBase64Buffer");
        return sb.ToString();
    }


    private async Task Crop()
    {
        var croppedDataUrl = await GetLargeBase64FromJsAsync();
        await OnCrop.InvokeAsync(croppedDataUrl);
        await Close();
    }
    private async Task Close()
    {
        await OnClose.InvokeAsync();
        StateHasChanged();
    }

    private void Crop1()
    {
        Console.Write("XYI");
    }
}
