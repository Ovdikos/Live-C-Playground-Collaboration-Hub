@page "/sessions"
@inject HttpClient Http
@inject UserState UserState
@inject NavigationManager NavigationManager
@using Application.DTOs.SessionDtos
@using Web.AuthService

<div class="container mt-5">
    <div class="d-flex gap-2 mb-3">
        <a class="btn btn-primary" href="/sessions/create">Create New SessionDtos</a>
        <button class="btn btn-success" @onclick="ShowJoinModal">Join SessionDtos</button>
    </div>

    <h3 class="fw-bold mb-3">SessionDtoss I'm Participating In</h3>
    @if (_sessionsParticipating == null)
    {
        <div>Loading...</div>
    }
    else if (_sessionsParticipating.Count == 0)
    {
        <div class="alert alert-info">You are not participating in any sessions.</div>
    }
    else
    {
        <ul class="list-group mb-5">
            @foreach (var s in _sessionsParticipating)
            {
                <li class="list-group-item d-flex flex-column align-items-start mb-2 rounded shadow-sm">
                    <div class="d-flex justify-content-between align-items-center w-100">
                        <span class="fw-semibold">@s.Name</span>
                        @if (s.OwnerName == UserState.User?.Username)
                        {
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowDeleteModal(s.Id)">
                                Delete
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowLeaveModal(s.Id)">
                                Leave
                            </button>
                        }
                    </div>
                    <div class="text-muted small">Snippet: @s.CodeSnippetTitle</div>
                    <div class="text-muted small">Participants: @(s.Participants != null ? s.Participants.Count : 0)</div>
                    <a class="btn btn-outline-primary btn-sm mt-2" href="/sessions/@s.Id">
                        <i class="bi bi-eye"></i> Details
                    </a>
                    <a class="btn btn-warning btn-sm ms-2" href="/sessions/@s.Id/edit">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                </li>
            }
        </ul>
    }

    <h3 class="fw-bold mb-3">SessionDtoss I Own</h3>
    @if (_sessionsOwned == null)
    {
        <div>Loading...</div>
    }
    else if (_sessionsOwned.Count == 0)
    {
        <div class="alert alert-info">You haven't created any sessions yet.</div>
    }
    else
    {
        <ul class="list-group">
            @foreach (var s in _sessionsOwned)
            {
                <li class="list-group-item d-flex flex-column align-items-start mb-2 rounded shadow-sm">
                    <div class="d-flex justify-content-between align-items-center w-100">
                        <span class="fw-semibold">@s.Name</span>
                        <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowDeleteModal(s.Id)">
                            Delete
                        </button>
                    </div>
                    <div class="text-muted small">Snippet: @s.CodeSnippetTitle</div>
                    <div class="text-muted small">Participants: @(s.Participants != null ? s.Participants.Count : 0)</div>
                    <a class="btn btn-outline-primary btn-sm mt-2" href="/sessions/@s.Id">
                        <i class="bi bi-eye"></i> Details
                    </a>
                </li>
            }
        </ul>
    }
</div>

@if (_showJoinModal)
{
    <div class="modal-backdrop fade show" style="z-index:1050"></div>
    <div class="modal d-block" tabindex="-1" style="z-index:1055">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Join SessionDtos</h5>
                    <button type="button" class="btn-close" @onclick="HideJoinModal"></button>
                </div>
                <div class="modal-body">
                    <InputText class="form-control" placeholder="Enter join code..." @bind-Value="_joinCode" />
                    @if (!string.IsNullOrEmpty(_joinError))
                    {
                        <div class="alert alert-danger mt-2">@_joinError</div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="HideJoinModal">Cancel</button>
                    <button class="btn btn-success" @onclick="JoinSessionAsync">Join</button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showLeaveModal)
{
    <div class="modal-backdrop fade show" style="z-index:1050"></div>
    <div class="modal d-block" tabindex="-1" style="z-index:1055">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Are you sure?</h5>
                </div>
                <div class="modal-body">
                    <p>Do you really want to leave this session?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="HideLeaveModal">No</button>
                    <button class="btn btn-danger" @onclick="LeaveSessionAsync">Yes, Leave</button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showDeleteModal)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete session?</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to permanently delete this session? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="HideDeleteModal">No</button>
                    <button class="btn btn-danger" @onclick="DeleteSessionAsync">Yes, Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<CollabSessionDto>? _sessionsParticipating;
    private List<CollabSessionDto>? _sessionsOwned;

    private bool _showJoinModal = false;
    private string _joinCode = "";
    private string? _joinError = null;

    private bool _showLeaveModal = false;
    private Guid _sessionToLeave;

    private bool _showDeleteModal = false;
    public Guid _sessionToDelete;
    
    private bool _initialized = false;
    private bool _isLoaded = false;

    void ShowJoinModal()
    {
        _joinCode = "";
        _joinError = null;
        _showJoinModal = true;
    }
    void HideJoinModal()
    {
        _showJoinModal = false;
        _joinError = null;
    }

    void ShowLeaveModal(Guid sessionId)
    {
        _sessionToLeave = sessionId;
        _showLeaveModal = true;
    }
    void HideLeaveModal()
    {
        _sessionToLeave = Guid.Empty;
        _showLeaveModal = false;
    }

    void ShowDeleteModal(Guid sessionId)
    {
        _sessionToDelete = sessionId;
        _showDeleteModal = true;
    }
    void HideDeleteModal()
    {
        _sessionToDelete = Guid.Empty;
        _showDeleteModal = false;
    }

    private async Task JoinSessionAsync()
    {
        _joinError = null;
        if (string.IsNullOrWhiteSpace(_joinCode))
        {
            _joinError = "Code is required.";
            return;
        }

        var response = await Http.PostAsJsonAsync("/api/sessions/join", new JoinSessionDto
        {
            JoinCode = _joinCode,
            UserId = UserState.User!.Id
        });

        if (response.IsSuccessStatusCode)
        {
            _showJoinModal = false;
            await ReloadSessions();
        }
        else
        {
            _joinError = "Failed to join session. Invalid code or already joined.";
        }
    }

    private async Task LeaveSessionAsync()
    {
        if (_sessionToLeave == Guid.Empty || UserState.User == null)
            return;

        var response = await Http.PostAsJsonAsync("/api/sessions/leave", new LeaveSessionDto
        {
            SessionId = _sessionToLeave,
            UserId = UserState.User.Id
        });

        if (response.IsSuccessStatusCode)
        {
            _showLeaveModal = false;
            await ReloadSessions();
        }
    }

    private async Task DeleteSessionAsync()
    {
        if (_sessionToDelete == Guid.Empty || UserState.User == null)
            return;

        var response = await Http.DeleteAsync($"/api/sessions/{_sessionToDelete}?userId={UserState.User.Id}");

        if (response.IsSuccessStatusCode)
        {
            _showDeleteModal = false;
            await ReloadSessions();
        }
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized)
        {
            _initialized = true;
            await UserState.InitializeAsync();
            
            await ReloadSessions();

            _isLoaded = true;
            StateHasChanged();
        }
    }

    private async Task ReloadSessions()
    {
        _sessionsParticipating = null;
        _sessionsOwned = null;

        if (!UserState.IsAuthenticated || UserState.User is null)
            return;

        var userId = UserState.User.Id.ToString();

        _sessionsParticipating = await Http.GetFromJsonAsync<List<CollabSessionDto>>($"/api/sessions/participating?userId={userId}");
        _sessionsOwned = await Http.GetFromJsonAsync<List<CollabSessionDto>>($"/api/sessions/owned?userId={userId}");
        StateHasChanged();
    }

    public class JoinSessionDto
    {
        public string JoinCode { get; set; } = string.Empty;
        public Guid UserId { get; set; }
    }
    public class LeaveSessionDto
    {
        public Guid SessionId { get; set; }
        public Guid UserId { get; set; }
    }
}
