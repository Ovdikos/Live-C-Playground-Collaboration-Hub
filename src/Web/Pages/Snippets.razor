@page "/snippets"
@inject HttpClient Http
@inject UserState UserState
@using Application.DTOs.SnippetsDtos
@using Web.AuthService

@if (!UserState.IsAuthenticated)
{
    <div class="snippets-container">
        <div class="snippets-auth-alert alert alert-warning">
            Please <a href="/login">login</a> to see your snippets.
        </div>
    </div>
}
else
{
    <div class="snippets-container">
        <div class="snippets-header">
            <h2 class="snippets-title">Code Snippets</h2>
            <a class="snippets-create-btn btn btn-primary" href="/snippets/new">
                <i class="bi bi-plus-lg"></i> New Snippet
            </a>
        </div>
        @if (_snippets == null)
        {
            <div class="snippets-loading">
                <div class="snippets-spinner"></div>
                <p class="snippets-loading-text"><em>Loading snippets...</em></p>
            </div>
        }
        else if (!_snippets.Any())
        {
            <div class="snippets-empty">
                No snippets found. <a href="/snippets/new">Create the first one!</a>
            </div>
        }
        else
        {
            <div class="snippets-list">
                @foreach (var s in _snippets)
                {
                    <div class="snippets-list-item">
                        <div class="snippet-card">
                            <div class="snippet-card-body">
                                <h5 class="snippet-card-title">@s.Title</h5>
                                <p class="snippet-card-content"><small>@s.Content</small></p>
                                <div class="snippet-card-footer">
                                    <span class="snippet-card-date">@s.CreatedAt.ToShortDateString()</span>
                                    <div class="snippet-card-btns">
                                        <a class="snippet-btn-view btn" href="/snippets/@s.Id">
                                            <i class="bi bi-eye"></i> View
                                        </a>
                                        <a class="snippet-btn-edit btn" href="/snippets/@s.Id/edit">
                                            <i class="bi bi-pencil-square"></i> Edit
                                        </a>
                                        <button class="snippet-btn-delete btn" @onclick="() => DeleteSnippet(s.Id)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private List<SnippetDto>? _snippets;
    private bool _initialized = false;
    private bool _isLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized)
        {
            _initialized = true;
            await UserState.InitializeAsync();

            if (!UserState.IsAuthenticated)
                return;
            var ownerId = UserState.User?.Id.ToString();
            if (ownerId is null)
                return;
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);
            _snippets = await Http.GetFromJsonAsync<List<SnippetDto>>($"/api/snippets?ownerId={ownerId}");

            _isLoaded = true;
            StateHasChanged();
        }

    }

    private async Task DeleteSnippet(Guid id)
    {
        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", UserState.Token);

        var response = await Http.DeleteAsync($"/api/snippets/{id}");
        if (response.IsSuccessStatusCode)
            _snippets = _snippets!.Where(x => x.Id != id).ToList();
    }
}
